{"body":"# CreateSend Objective-C #\r\n\r\nCreateSend Objective-C is a library for talking to the Campaign Monitor API from Cocoa & Cocoa Touch applications. It supports Mac OS X 10.5+ & iOS 4.0+.\r\n\r\n### Features ###\r\n\r\n- Supports all of the available [Campaign Monitor APIs](http://www.campaignmonitor.com/api/).\r\n- Provides a drop-in UI for adding new subscribers to your lists, with custom field support.\r\n\r\n### Sample Project ###\r\n\r\nA sample project is included in `$SRCROOT/Example/CreateSendExample/CreateSendExample.xcodeproj`. With the help of [IBAForms](https://github.com/ittybittydude/IBAForms/) by the friendly folks at [Itty Bitty Apps](http://www.ittybittyapps.com), `CreateSendExample` demonstrates presenting a form for subscribing to a Campaign Monitor list.\r\n\r\nYou will need to specify your API key in `CSExampleAppDelegate.m` before building & running `CreateSendExample`.\r\n\r\nThe provided `CSSubscriptionFormViewController` class can present a simple form with name & email address, or it can display the custom fields configured for the subscription list. Set the `customFieldBehavior` variable in `CSExampleAppDelegate.m` to any of the values specified in `CSExampleAppCustomFieldBehavior` to configure the form in fixed-fields or dynamic-fields mode.\r\n\r\n### Basic API Wrapper Usage Examples ###\r\n\r\nIf you prefer to build your own custom UI, you can simply use the API wrapper directly. For full documentation of the API wrapper, see the class documentation is available in `Documentation/html/index.html` (generated with `rake docs:generate`).\r\n\r\nHere's a some examples to get you started.\r\n\r\n#### Getting your API key: ####\r\n\r\n    CSAPI *API = [[CSAPI alloc] init];\r\n    \r\n    [API getAPIKeyWithSiteURL:@\"http://yoursite.createsend.com/\" username:@\"yourusername\" password:@\"yourpassword\" completionHandler:^(NSString *APIKey) {\r\n        NSLog(@\"Your API key is %@\", APIKey);\r\n    } errorHandler:^(NSError *error) {\r\n        NSLog(@\"Something went wrong: %@\", error);\r\n    }];\r\n\r\n#### Subscribing to a list: ####\r\n\r\n    CSAPI *API = [[CSAPI alloc] initWithAPIKey:@\"ab6b0598d32fecd63485b18abb4f0ad7\"];\r\n    \r\n    NSArray *customFields = @[\r\n        [CSCustomField customFieldWithKey:@\"AddressStreet\" value:@\"1 Infinite Loop\"],\r\n        [CSCustomField customFieldWithKey:@\"AddressSuburb\" value:@\"Cupertino\"]\r\n    ];\r\n\r\n    [API subscribeToListWithID:@\"66f889ae2e1981157285b4f76f2e02ad\"\r\n                  emailAddress:@\"johnny.appleseed@apple.com\"\r\n                          name:@\"Johnny Appleseed\"\r\n             shouldResubscribe:YES\r\n                  customFields:customFields\r\n             completionHandler:^(NSString *subscribedAddress) {\r\n                NSLog(@\"Successfully subscribed %@\", subscribedAddress);\r\n             } errorHandler:^(NSError *error) {\r\n                NSLog(@\"Something went wrong: %@\", error);\r\n             }];\r\n\r\n#### Authorizating via OAuth: ####\r\n\r\n    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n    {\r\n        API = [[CSAPI alloc] initWithClientID:@\"CLIENT_ID\" clientSecret:@\"CLIENT_SECRET\" scope:@[CSAPIClientScopeManageLists, CSAPIClientScopeImportSubscribers]];\r\n        if (!API.isAuthorized) {\r\n            [API authorize];    \r\n        }\r\n    }\r\n\r\nOnce authorized, your app will be launched with the URL scheme csapiCLIENT_ID. The easiest way to register for this scheme is right-click on your app's plist file and select Open As â†’ Source Code, and add the following code below the first <dict> tag, substituting CLIENT_ID with your app's client id:\r\n\r\n    <key>CFBundleURLTypes</key>\r\n    <array>\r\n        <dict>\r\n            <key>CFBundleURLSchemes</key>\r\n            <array>\r\n                <string>csapiCLIENT_ID</string>\r\n            </array>\r\n        </dict>\r\n    </array>\r\n\r\nNow that your app is registered for the correct scheme, you need to add the following code to your application delegate in order to complete the authorization flow:\r\n\r\n    - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\r\n    {\r\n        if ([API handleOpenURL:url]) {\r\n            if (API.isAuthorized) {\r\n                NSLog(@\"App has been authorized successfully!\");\r\n                // At this point you can start making API calls\r\n            }\r\n            return YES;\r\n        }\r\n        // Add whatever other url handling code your app requires here\r\n        return NO;\r\n    }\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"CreateSend Objective-C","tagline":"A library for talking to the Campaign Monitor API from Cocoa & Cocoa Touch applications."}